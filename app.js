/**
 * @fileoverview Main application entry point for Shipping Manager CoPilot.
 * This is a standalone HTTPS web server that provides a workaround for the in-game chat bug
 * where certain characters cause page reloads. The application proxies API calls to
 * shippingmanager.cc with session-based authentication, providing real-time WebSocket updates,
 * alliance chat, private messaging, and game management features (fuel/CO2 purchasing, vessel
 * departures, bulk repairs, marketing campaigns).
 *
 * The server architecture:
 * - Express-based HTTPS server with self-signed certificates
 * - WebSocket server for real-time chat updates (25-second refresh interval)
 * - Modular route handlers for alliance, messenger, and game management
 * - Rate limiting and security middleware
 * - Network-accessible on all interfaces (listens on 0.0.0.0)
 *
 * @module app
 * @requires express
 * @requires os
 * @requires dotenv
 * @requires ./server/config
 * @requires ./server/middleware
 * @requires ./server/utils/api
 * @requires ./server/certificate
 * @requires ./server/websocket
 * @requires ./server/routes/alliance
 * @requires ./server/routes/messenger
 * @requires ./server/routes/game
 * @requires ./server/routes/settings
 */

const express = require('express');
const os = require('os');
require('dotenv').config();

// Server modules
const config = require('./server/config');
const { setupMiddleware } = require('./server/middleware');
const { initializeAlliance } = require('./server/utils/api');
const { createHttpsServer } = require('./server/certificate');
const { initWebSocket, startChatAutoRefresh } = require('./server/websocket');

// Route modules
const allianceRoutes = require('./server/routes/alliance');
const messengerRoutes = require('./server/routes/messenger');
const gameRoutes = require('./server/routes/game');
const settingsRoutes = require('./server/routes/settings');
const coopRoutes = require('./server/routes/coop');
const demoRoutes = require('./server/routes/demo');

// Initialize Express app
const app = express();

// Setup middleware
setupMiddleware(app);

/**
 * Serves the Certificate Authority (CA) certificate for download.
 * Users can install this CA certificate to trust all server certificates
 * generated by this application across their network.
 *
 * @name GET /ca-cert.pem
 * @function
 * @param {express.Request} req - Express request object
 * @param {express.Response} res - Express response object
 * @returns {void} Downloads the CA certificate file or sends 404 error
 */
app.get('/ca-cert.pem', (req, res) => {
  res.download('./ca-cert.pem', 'ShippingManager-CA.pem', (err) => {
    if (err) {
      console.error('Error downloading CA certificate:', err);
      res.status(404).send('CA certificate not found');
    }
  });
});

// Setup routes
app.use('/api', allianceRoutes);
app.use('/api', messengerRoutes);
app.use('/api', gameRoutes);
app.use('/api', settingsRoutes);
app.use('/api', coopRoutes);

// Demo API (provides dummy data for recordings)
app.use('/api/demo', demoRoutes);

// Create HTTPS server
const server = createHttpsServer(app);

// Initialize WebSocket
const wss = initWebSocket(server);

// HTTP Upgrade for WebSocket
server.on('upgrade', (request, socket, head) => {
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});

// Start server
server.listen(config.PORT, config.HOST, async () => {
  await initializeAlliance();

  // Start chat auto-refresh
  startChatAutoRefresh();

  // Start backend automation (auto-repair with interval)
  const backendAutomation = require('./server/automation');
  backendAutomation.initialize();

  // Display network addresses
  const networkInterfaces = os.networkInterfaces();
  const addresses = [];

  for (const name of Object.keys(networkInterfaces)) {
    for (const net of networkInterfaces[name]) {
      if (net.family === 'IPv4' && !net.internal) {
        addresses.push(net.address);
      }
    }
  }

  console.log(`\nðŸš€ ShippingManager CoPilot Frontend - (HTTPS) running on:`);
  console.log(`   Local:   https://localhost:${config.PORT}`);
  if (addresses.length > 0) {
    addresses.forEach(addr => {
      console.log(`   Network: https://${addr}:${config.PORT}`);
    });
  }
  console.log(`\nâš  Self-signed certificate - you need to accept the security warning in your browser\n`);
});
